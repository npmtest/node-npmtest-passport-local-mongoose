{"/home/travis/build/npmtest/node-npmtest-passport-local-mongoose/test.js":"/* istanbul instrument in package npmtest_passport_local_mongoose */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-passport-local-mongoose/lib.npmtest_passport_local_mongoose.js":"/* istanbul instrument in package npmtest_passport_local_mongoose */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_passport_local_mongoose = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_passport_local_mongoose = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-passport-local-mongoose/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-passport-local-mongoose && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_passport_local_mongoose */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_passport_local_mongoose\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_passport_local_mongoose.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_passport_local_mongoose.rollup.js'] =\n            local.assetsDict['/assets.npmtest_passport_local_mongoose.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_passport_local_mongoose.__dirname + '/lib.npmtest_passport_local_mongoose.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-passport-local-mongoose/node_modules/passport-local-mongoose/index.js":"var crypto = require('crypto');\nvar LocalStrategy = require('passport-local').Strategy;\nvar errors = require('./lib/errors.js');\nvar scmp = require('scmp');\nvar semver = require('semver');\n\nvar pbkdf2DigestSupport = semver.gte(process.version, '0.12.0');\n\nmodule.exports = function(schema, options) {\n  options = options || {};\n  options.saltlen = options.saltlen || 32;\n  options.iterations = options.iterations || 25000;\n  options.keylen = options.keylen || 512;\n  options.encoding = options.encoding || 'hex';\n  options.digestAlgorithm = options.digestAlgorithm || 'sha256'; // To get a list of supported hashes use crypto.getHashes()\n  options.passwordValidator = options.passwordValidator || function(password, cb) { cb(null); };\n\n  // Populate field names with defaults if not set\n  options.usernameField = options.usernameField || 'username';\n  options.usernameUnique = options.usernameUnique === undefined ? true : options.usernameUnique;\n\n  // Populate username query fields with defaults if not set,\n  // otherwise add username field to query fields.\n  if (options.usernameQueryFields) {\n    options.usernameQueryFields.push(options.usernameField);\n  } else {\n    options.usernameQueryFields = [options.usernameField];\n  }\n\n  // option to convert username to lowercase when finding\n  options.usernameLowerCase = options.usernameLowerCase || false;\n\n  options.hashField = options.hashField || 'hash';\n  options.saltField = options.saltField || 'salt';\n\n  if (options.limitAttempts) {\n    options.lastLoginField = options.lastLoginField || 'last';\n    options.attemptsField = options.attemptsField || 'attempts';\n    options.interval = options.interval || 100; // 100 ms\n    options.maxInterval = options.maxInterval || 300000; // 5 min\n    options.maxAttempts = options.maxAttempts || Infinity;\n  }\n\n  options.errorMessages = options.errorMessages || {};\n  options.errorMessages.MissingPasswordError = options.errorMessages.MissingPasswordError || 'No password was given';\n  options.errorMessages.AttemptTooSoonError = options.errorMessages.AttemptTooSoonError || 'Account is currently locked. Try again later';\n  options.errorMessages.TooManyAttemptsError = options.errorMessages.TooManyAttemptsError || 'Account locked due to too many failed login attempts';\n  options.errorMessages.NoSaltValueStoredError = options.errorMessages.NoSaltValueStoredError || 'Authentication not possible. No salt value stored';\n  options.errorMessages.IncorrectPasswordError = options.errorMessages.IncorrectPasswordError || 'Password or username are incorrect';\n  options.errorMessages.IncorrectUsernameError = options.errorMessages.IncorrectUsernameError || 'Password or username are incorrect';\n  options.errorMessages.MissingUsernameError = options.errorMessages.MissingUsernameError|| 'No username was given';\n  options.errorMessages.UserExistsError = options.errorMessages.UserExistsError|| 'A user with the given username is already registered';\n\n  var pbkdf2 = function(password, salt, callback) {\n    if (pbkdf2DigestSupport) {\n      crypto.pbkdf2(password, salt, options.iterations, options.keylen, options.digestAlgorithm, callback);\n    } else {\n      crypto.pbkdf2(password, salt, options.iterations, options.keylen, callback);\n    }\n  };\n\n  var schemaFields = {};\n\n  if (!schema.path(options.usernameField)) {\n    schemaFields[options.usernameField] = {type: String, unique: options.usernameUnique};\n  }\n  schemaFields[options.hashField] = {type: String, select: false};\n  schemaFields[options.saltField] = {type: String, select: false};\n\n  if (options.limitAttempts) {\n    schemaFields[options.attemptsField] = {type: Number, default: 0};\n    schemaFields[options.lastLoginField] = {type: Date, default: Date.now};\n  }\n\n  schema.add(schemaFields);\n\n  schema.pre('save', function(next) {\n    // if specified, convert the username to lowercase\n    if (options.usernameLowerCase && this[options.usernameField]) {\n      this[options.usernameField] = this[options.usernameField].toLowerCase();\n    }\n\n    next();\n  });\n\n  schema.methods.setPassword = function(password, cb) {\n    if (!password) {\n      return cb(new errors.MissingPasswordError(options.errorMessages.MissingPasswordError));\n    }\n\n    var self = this;\n\n    options.passwordValidator(password, function(err) {\n      if (err) {\n        return cb(err);\n      }\n\n      crypto.randomBytes(options.saltlen, function(randomBytesErr, buf) {\n        if (randomBytesErr) {\n          return cb(randomBytesErr);\n        }\n\n        var salt = buf.toString(options.encoding);\n\n        pbkdf2(password, salt, function(pbkdf2Err, hashRaw) {\n          if (pbkdf2Err) {\n            return cb(pbkdf2Err);\n          }\n\n          self.set(options.hashField, new Buffer(hashRaw, 'binary').toString(options.encoding));\n          self.set(options.saltField, salt);\n\n          cb(null, self);\n        });\n      });\n    });\n  };\n\n  function authenticate(user, password, cb) {\n    if (options.limitAttempts) {\n      var attemptsInterval = Math.pow(options.interval, Math.log(user.get(options.attemptsField) + 1));\n      var calculatedInterval = (attemptsInterval < options.maxInterval) ? attemptsInterval : options.maxInterval;\n\n      if (Date.now() - user.get(options.lastLoginField) < calculatedInterval) {\n        user.set(options.lastLoginField, Date.now());\n        user.save();\n        return cb(null, false, new errors.AttemptTooSoonError(options.errorMessages.AttemptTooSoonError));\n      }\n\n      if (user.get(options.attemptsField) >= options.maxAttempts) {\n        return cb(null, false, new errors.TooManyAttemptsError(options.errorMessages.TooManyAttemptsError));\n      }\n    }\n\n    if (!user.get(options.saltField)) {\n      return cb(null, false, new errors.NoSaltValueStoredError(options.errorMessages.NoSaltValueStoredError));\n    }\n\n    pbkdf2(password, user.get(options.saltField), function(err, hashRaw) {\n      if (err) {\n        return cb(err);\n      }\n\n      var hash = new Buffer(hashRaw, 'binary').toString(options.encoding);\n\n      if (scmp(hash, user.get(options.hashField))) {\n        if (options.limitAttempts) {\n          user.set(options.lastLoginField, Date.now());\n          user.set(options.attemptsField, 0);\n          user.save();\n        }\n        return cb(null, user);\n      } else {\n        if (options.limitAttempts) {\n          user.set(options.lastLoginField, Date.now());\n          user.set(options.attemptsField, user.get(options.attemptsField) + 1);\n          user.save(function(saveErr) {\n            if (saveErr) { return cb(saveErr); }\n            if (user.get(options.attemptsField) >= options.maxAttempts) {\n              return cb(null, false, new errors.TooManyAttemptsError(options.errorMessages.TooManyAttemptsError));\n            } else {\n              return cb(null, false, new errors.IncorrectPasswordError(options.errorMessages.IncorrectPasswordError));\n            }\n          });\n        } else {\n          return cb(null, false, new errors.IncorrectPasswordError(options.errorMessages.IncorrectPasswordError));\n        }\n      }\n    });\n\n  }\n\n  schema.methods.authenticate = function(password, cb) {\n    var self = this;\n\n    // With hash/salt marked as \"select: false\" - load model including the salt/hash fields form db and authenticate\n    if (!self.get(options.saltField)) {\n      self.constructor.findByUsername(self.get(options.usernameField), true, function(err, user) {\n        if (err) { return cb(err); }\n\n        if (user) {\n          return authenticate(user, password, cb);\n        } else {\n          return cb(null, false, new errors.IncorrectUsernameError(options.errorMessages.IncorrectUsernameError));\n        }\n      });\n    } else {\n      return authenticate(self, password, cb);\n    }\n  };\n\n  if (options.limitAttempts) {\n    schema.methods.resetAttempts = function(cb) {\n      this.set(options.attemptsField, 0);\n      this.save(cb);\n    };\n  }\n\n  schema.statics.authenticate = function() {\n    var self = this;\n\n    return function(username, password, cb) {\n      self.findByUsername(username, true, function(err, user) {\n        if (err) { return cb(err); }\n\n        if (user) {\n          return user.authenticate(password, cb);\n        } else {\n          return cb(null, false, new errors.IncorrectUsernameError(options.errorMessages.IncorrectUsernameError));\n        }\n      });\n    };\n  };\n\n  schema.statics.serializeUser = function() {\n    return function(user, cb) {\n      cb(null, user.get(options.usernameField));\n    };\n  };\n\n  schema.statics.deserializeUser = function() {\n    var self = this;\n\n    return function(username, cb) {\n      self.findByUsername(username, cb);\n    };\n  };\n\n  schema.statics.register = function(user, password, cb) {\n    // Create an instance of this in case user isn't already an instance\n    if (!(user instanceof this)) {\n      user = new this(user);\n    }\n\n    if (!user.get(options.usernameField)) {\n      return cb(new errors.MissingUsernameError(options.errorMessages.MissingUsernameError));\n    }\n\n    var self = this;\n    self.findByUsername(user.get(options.usernameField), function(err, existingUser) {\n      if (err) { return cb(err); }\n\n      if (existingUser) {\n        return cb(new errors.UserExistsError(options.errorMessages.UserExistsError));\n      }\n\n      user.setPassword(password, function(setPasswordErr, user) {\n        if (setPasswordErr) {\n          return cb(setPasswordErr);\n        }\n\n        user.save(function(saveErr) {\n          if (saveErr) {\n            return cb(saveErr);\n          }\n\n          cb(null, user);\n        });\n      });\n    });\n  };\n\n  schema.statics.findByUsername = function(username, selectHashSaltFields, cb) {\n    if (typeof cb === 'undefined') {\n      cb = selectHashSaltFields;\n      selectHashSaltFields = false;\n    }\n\n    // if specified, convert the username to lowercase\n    if (username !== undefined && options.usernameLowerCase) {\n      username = username.toLowerCase();\n    }\n\n    // Add each username query field\n    var queryOrParameters = [];\n    for (var i = 0; i < options.usernameQueryFields.length; i++) {\n      var parameter = {};\n      parameter[options.usernameQueryFields[i]] = username;\n      queryOrParameters.push(parameter);\n    }\n\n    var query = this.findOne({$or: queryOrParameters});\n\n    if (selectHashSaltFields) {\n      query.select('+' + options.hashField + \" +\" + options.saltField);\n    }\n\n    if (options.selectFields) {\n      query.select(options.selectFields);\n    }\n\n    if (options.populateFields) {\n      query.populate(options.populateFields);\n    }\n\n    if (cb) {\n      query.exec(cb);\n    } else {\n      return query;\n    }\n  };\n\n  schema.statics.createStrategy = function() {\n    return new LocalStrategy(options, this.authenticate());\n  };\n};\n\nmodule.exports.errors = errors;","/home/travis/build/npmtest/node-npmtest-passport-local-mongoose/node_modules/passport-local-mongoose/lib/errors.js":"var generaterr = require('generaterr');\n\nvar AuthenticationError = generaterr('AuthenticationError');\n\nmodule.exports = {\n  AuthenticationError : AuthenticationError,\n  IncorrectUsernameError : generaterr('IncorrectUsernameError', null, { inherits : AuthenticationError }),\n  IncorrectPasswordError : generaterr('IncorrectPasswordError', null,{ inherits : AuthenticationError }),\n  MissingUsernameError : generaterr('MissingUsernameError', null,{ inherits : AuthenticationError }),\n  MissingPasswordError : generaterr('MissingPasswordError', null,{ inherits : AuthenticationError }),\n  UserExistsError : generaterr('UserExistsError', null,{ inherits : AuthenticationError }),\n  NoSaltValueStoredError : generaterr('NoSaltValueStoredError', null,{ inherits : AuthenticationError }),\n  AttemptTooSoonError : generaterr('AttemptTooSoonError', null,{ inherits : AuthenticationError }),\n  TooManyAttemptsError : generaterr('TooManyAttemptsError', null,{ inherits : AuthenticationError })\n};","/home/travis/build/npmtest/node-npmtest-passport-local-mongoose/node_modules/passport-local-mongoose/release.js":"var shell = require('shelljs');\n\nif (exec('git status --porcelain').output != '') {\n  console.error('Git working directory not clean.');\n  process.exit(2);\n}\n\nvar versionIncrement = process.argv[process.argv.length -1];\n\nif (versionIncrement != 'major' && versionIncrement != 'minor' && versionIncrement != 'patch') {\n  console.error('Usage: node release.js major|minor|patch');\n  process.exit(1);\n}\n\nexec('npm version ' + versionIncrement);\n\nexec('npm test'); \nexec('git push');\nexec('git push --tags');\nexec('npm publish');\n\nfunction exec(cmd) {\n  var ret = shell.exec(cmd, { silent : true });\n\n  if (ret.code != 0) {\n    console.error(ret.output);\n    process.exit(1);\n  }\n\n  return ret;\n}\n"}